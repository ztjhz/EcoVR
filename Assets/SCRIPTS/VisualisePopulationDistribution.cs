using UnityEngine;using System.Collections.Generic;using System.Linq;using XCharts.Runtime;public class VisualisePopulationDistribution : MonoBehaviour{    private void Awake()    {        ScatterChart chart = gameObject.GetComponent<ScatterChart>();        if (chart == null)        {            Debug.LogWarning("Chart missing! Adding a chart now...");            CreateGraph(chart);        }        chart.RemoveData();        List<AnimalDataPoint> animalHistory = AnimalAnalytics.Instance.GetAnimalHistory();                Dictionary<string, int> graphIndexFromAnimalCategory = new Dictionary<string, int>();        Dictionary<int, List<AnimalDataPoint>> animalHistoryFromTime = animalHistory            .GroupBy(a => a.time)            .ToDictionary(g => g.Key, g => g.ToList());        int graphCount = 0;        int currTime = animalHistoryFromTime.Keys.First();        // todo: implement ability for users to choose the time to display the heatmap        foreach (AnimalDataPoint data in animalHistoryFromTime[currTime])        {            string animalCategory = data.animalType; // in the future can group similar animals together            if (!graphIndexFromAnimalCategory.ContainsKey(animalCategory))            {                graphIndexFromAnimalCategory[animalCategory] = graphCount;                Scatter serie = chart.AddSerie<Scatter>(animalCategory);                serie.symbol.type = SymbolType.Circle; // in the future, can change based on prey/predator                serie.symbol.size = 10;
                serie.itemStyle.opacity = 0.5f;
                graphCount++;            }            int index = graphIndexFromAnimalCategory[animalCategory];            foreach (Vector3 pos in data.positions)
            {
                chart.AddData(index, new double[] { pos[0], pos[1] });
            }        }    }    private void Update()    {    }    private void CreateGraph(ScatterChart chart)    {        // Fall back        chart = gameObject.AddComponent<ScatterChart>();        chart.Init();        chart.SetSize(1300, 700);        var title = chart.EnsureChartComponent<Title>();        title.text = "Population Distribution";        // todo: continue customising (not the focus now, as the graph should already exist)        // set x-axis and y-axis name        // remove x-axis and y-axis ticks and labels        // remove y-axis split lines        // add legend    }}